AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates a Lambda function (dev/qa/prod) with IAM role and Function URL"
Parameters:
  Environment:
    Type: String
    AllowedValues:
      - dev
      - qa
    Description: "Environment name for Lambda (dev | qa | prod)"
  
  LambdaRuntime:
    Type: String
    Default: nodejs22.x
    Description: "Runtime for the Lambda function"

  LambdaHandler:
    Type: String
    Default: index.handler
    Description: "Handler name"

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "lambda-exec-role-${Environment}-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: AllowS3Read
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource: "*"

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-${Environment}-presign"
      Runtime: !Ref LambdaRuntime
      Handler: !Ref LambdaHandler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 512
      Code:
        ZipFile: |
          exports.handler = async () => {
            return {
              statusCode: 200,
              body: "Hello from ${Environment} Lambda!"
            };
          };

  LambdaFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      TargetFunctionArn: !GetAtt MyLambdaFunction.Arn

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MyLambdaFunction
      Action: lambda:InvokeFunctionUrl
      Principal: "*"
      FunctionUrlAuthType: NONE

Outputs:
  FunctionName:
    Value: !Ref MyLambdaFunction

  FunctionUrl:
    Value: !GetAtt LambdaFunctionUrl.FunctionUrl
    Description: "Public Function URL for this Lambda"
 